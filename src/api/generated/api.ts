/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from "url";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "./base";

/**
 *
 * @export
 * @interface CompanyHouseEntryDto
 */
export interface CompanyHouseEntryDto {
  /**
   *
   * @type {number}
   * @memberof CompanyHouseEntryDto
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof CompanyHouseEntryDto
   */
  companyNumber?: string;
  /**
   *
   * @type {string}
   * @memberof CompanyHouseEntryDto
   */
  companyName?: string;
  /**
   *
   * @type {string}
   * @memberof CompanyHouseEntryDto
   */
  etag?: string;
  /**
   *
   * @type {string}
   * @memberof CompanyHouseEntryDto
   */
  previousCompanyNames?: string;
  /**
   *
   * @type {string}
   * @memberof CompanyHouseEntryDto
   */
  addressLine1?: string;
  /**
   *
   * @type {string}
   * @memberof CompanyHouseEntryDto
   */
  addressLine2?: string;
  /**
   *
   * @type {string}
   * @memberof CompanyHouseEntryDto
   */
  addressCareOf?: string;
  /**
   *
   * @type {string}
   * @memberof CompanyHouseEntryDto
   */
  addressCountry?: string;
  /**
   *
   * @type {string}
   * @memberof CompanyHouseEntryDto
   */
  addressLocality?: string;
  /**
   *
   * @type {string}
   * @memberof CompanyHouseEntryDto
   */
  addressPOBox?: string;
  /**
   *
   * @type {string}
   * @memberof CompanyHouseEntryDto
   */
  addressPostCode?: string;
  /**
   *
   * @type {string}
   * @memberof CompanyHouseEntryDto
   */
  addressPremises?: string;
  /**
   *
   * @type {string}
   * @memberof CompanyHouseEntryDto
   */
  addressRegion?: string;
  /**
   *
   * @type {Array<SIC>}
   * @memberof CompanyHouseEntryDto
   */
  sicCodes?: Array<SIC>;
}
/**
 *
 * @export
 * @interface CompanySponsorDto
 */
export interface CompanySponsorDto {
  /**
   *
   * @type {number}
   * @memberof CompanySponsorDto
   */
  id?: number;
  /**
   *
   * @type {PDFSponsorDto}
   * @memberof CompanySponsorDto
   */
  pdfSponsor?: PDFSponsorDto;
  /**
   *
   * @type {CompanyHouseEntryDto}
   * @memberof CompanySponsorDto
   */
  companyHouseEntry?: CompanyHouseEntryDto;
  /**
   *
   * @type {string}
   * @memberof CompanySponsorDto
   */
  fetchDataStatus?: CompanySponsorDtoFetchDataStatusEnum;
  /**
   *
   * @type {string}
   * @memberof CompanySponsorDto
   */
  dateUpdated?: string;
  /**
   *
   * @type {boolean}
   * @memberof CompanySponsorDto
   */
  nameMatches?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CompanySponsorDto
   */
  localityMatches?: boolean;
}

/**
 * @export
 * @enum {string}
 */
export enum CompanySponsorDtoFetchDataStatusEnum {
  MULTIPLERESULT = "MULTIPLE_RESULT",
  SUCCESS = "SUCCESS",
  FAILED = "FAILED",
  NORESULT = "NO_RESULT",
  MULTIPLERESULTMATCHLOCALITY = "MULTIPLE_RESULT_MATCH_LOCALITY",
}

/**
 *
 * @export
 * @interface PDFSponsor
 */
export interface PDFSponsor {
  /**
   *
   * @type {number}
   * @memberof PDFSponsor
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof PDFSponsor
   */
  companyName?: string;
  /**
   *
   * @type {string}
   * @memberof PDFSponsor
   */
  town?: string;
  /**
   *
   * @type {string}
   * @memberof PDFSponsor
   */
  industry?: string;
  /**
   *
   * @type {string}
   * @memberof PDFSponsor
   */
  mainTier?: string;
  /**
   *
   * @type {string}
   * @memberof PDFSponsor
   */
  subTier?: string;
  /**
   *
   * @type {string}
   * @memberof PDFSponsor
   */
  dateAdded?: string;
}
/**
 *
 * @export
 * @interface PDFSponsorDto
 */
export interface PDFSponsorDto {
  /**
   *
   * @type {number}
   * @memberof PDFSponsorDto
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof PDFSponsorDto
   */
  companyName?: string;
  /**
   *
   * @type {string}
   * @memberof PDFSponsorDto
   */
  town?: string;
  /**
   *
   * @type {string}
   * @memberof PDFSponsorDto
   */
  industry?: string;
  /**
   *
   * @type {string}
   * @memberof PDFSponsorDto
   */
  mainTier?: string;
  /**
   *
   * @type {string}
   * @memberof PDFSponsorDto
   */
  subTier?: string;
  /**
   *
   * @type {string}
   * @memberof PDFSponsorDto
   */
  dateAdded?: string;
}
/**
 *
 * @export
 * @interface PageCompanySponsorDto
 */
export interface PageCompanySponsorDto {
  /**
   *
   * @type {number}
   * @memberof PageCompanySponsorDto
   */
  totalElements?: number;
  /**
   *
   * @type {number}
   * @memberof PageCompanySponsorDto
   */
  totalPages?: number;
  /**
   *
   * @type {number}
   * @memberof PageCompanySponsorDto
   */
  size?: number;
  /**
   *
   * @type {Array<CompanySponsorDto>}
   * @memberof PageCompanySponsorDto
   */
  content?: Array<CompanySponsorDto>;
  /**
   *
   * @type {Sort}
   * @memberof PageCompanySponsorDto
   */
  sort?: Sort;
  /**
   *
   * @type {boolean}
   * @memberof PageCompanySponsorDto
   */
  first?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageCompanySponsorDto
   */
  last?: boolean;
  /**
   *
   * @type {number}
   * @memberof PageCompanySponsorDto
   */
  numberOfElements?: number;
  /**
   *
   * @type {Pageable}
   * @memberof PageCompanySponsorDto
   */
  pageable?: Pageable;
  /**
   *
   * @type {number}
   * @memberof PageCompanySponsorDto
   */
  number?: number;
  /**
   *
   * @type {boolean}
   * @memberof PageCompanySponsorDto
   */
  empty?: boolean;
}
/**
 *
 * @export
 * @interface PagePDFSponsor
 */
export interface PagePDFSponsor {
  /**
   *
   * @type {number}
   * @memberof PagePDFSponsor
   */
  totalElements?: number;
  /**
   *
   * @type {number}
   * @memberof PagePDFSponsor
   */
  totalPages?: number;
  /**
   *
   * @type {number}
   * @memberof PagePDFSponsor
   */
  size?: number;
  /**
   *
   * @type {Array<PDFSponsor>}
   * @memberof PagePDFSponsor
   */
  content?: Array<PDFSponsor>;
  /**
   *
   * @type {Sort}
   * @memberof PagePDFSponsor
   */
  sort?: Sort;
  /**
   *
   * @type {boolean}
   * @memberof PagePDFSponsor
   */
  first?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PagePDFSponsor
   */
  last?: boolean;
  /**
   *
   * @type {number}
   * @memberof PagePDFSponsor
   */
  numberOfElements?: number;
  /**
   *
   * @type {Pageable}
   * @memberof PagePDFSponsor
   */
  pageable?: Pageable;
  /**
   *
   * @type {number}
   * @memberof PagePDFSponsor
   */
  number?: number;
  /**
   *
   * @type {boolean}
   * @memberof PagePDFSponsor
   */
  empty?: boolean;
}
/**
 *
 * @export
 * @interface Pageable
 */
export interface Pageable {
  /**
   *
   * @type {number}
   * @memberof Pageable
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof Pageable
   */
  size?: number;
  /**
   *
   * @type {Array<string>}
   * @memberof Pageable
   */
  sort?: Array<string>;
}
/**
 *
 * @export
 * @interface SIC
 */
export interface SIC {
  /**
   *
   * @type {number}
   * @memberof SIC
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof SIC
   */
  code?: number;
  /**
   *
   * @type {string}
   * @memberof SIC
   */
  description?: string;
}
/**
 *
 * @export
 * @interface Sort
 */
export interface Sort {
  /**
   *
   * @type {boolean}
   * @memberof Sort
   */
  sorted?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Sort
   */
  unsorted?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Sort
   */
  empty?: boolean;
}

/**
 * CompanySponsorControllerApi - axios parameter creator
 * @export
 */
export const CompanySponsorControllerApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} page
     * @param {number} size
     * @param {number} zone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCompanyHouseEntry: async (
      page: number,
      size: number,
      zone: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'page' is not null or undefined
      if (page === null || page === undefined) {
        throw new RequiredError(
          "page",
          "Required parameter page was null or undefined when calling getCompanyHouseEntry."
        );
      }
      // verify required parameter 'size' is not null or undefined
      if (size === null || size === undefined) {
        throw new RequiredError(
          "size",
          "Required parameter size was null or undefined when calling getCompanyHouseEntry."
        );
      }
      // verify required parameter 'zone' is not null or undefined
      if (zone === null || zone === undefined) {
        throw new RequiredError(
          "zone",
          "Required parameter zone was null or undefined when calling getCompanyHouseEntry."
        );
      }
      const localVarPath = `/company`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      if (zone !== undefined) {
        localVarQueryParameter["zone"] = zone;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCompanyHouseEntryById: async (
      id: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling getCompanyHouseEntryById."
        );
      }
      const localVarPath = `/company/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CompanySponsorControllerApi - functional programming interface
 * @export
 */
export const CompanySponsorControllerApiFp = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} page
     * @param {number} size
     * @param {number} zone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCompanyHouseEntry(
      page: number,
      size: number,
      zone: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PageCompanySponsorDto>
    > {
      const localVarAxiosArgs = await CompanySponsorControllerApiAxiosParamCreator(
        configuration
      ).getCompanyHouseEntry(page, size, zone, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCompanyHouseEntryById(
      id: number,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CompanySponsorDto>
    > {
      const localVarAxiosArgs = await CompanySponsorControllerApiAxiosParamCreator(
        configuration
      ).getCompanyHouseEntryById(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * CompanySponsorControllerApi - factory interface
 * @export
 */
export const CompanySponsorControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {number} page
     * @param {number} size
     * @param {number} zone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCompanyHouseEntry(
      page: number,
      size: number,
      zone: number,
      options?: any
    ): AxiosPromise<PageCompanySponsorDto> {
      return CompanySponsorControllerApiFp(configuration)
        .getCompanyHouseEntry(page, size, zone, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCompanyHouseEntryById(
      id: number,
      options?: any
    ): AxiosPromise<CompanySponsorDto> {
      return CompanySponsorControllerApiFp(configuration)
        .getCompanyHouseEntryById(id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * CompanySponsorControllerApi - object-oriented interface
 * @export
 * @class CompanySponsorControllerApi
 * @extends {BaseAPI}
 */
export class CompanySponsorControllerApi extends BaseAPI {
  /**
   *
   * @param {number} page
   * @param {number} size
   * @param {number} zone
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CompanySponsorControllerApi
   */
  public getCompanyHouseEntry(
    page: number,
    size: number,
    zone: number,
    options?: any
  ) {
    return CompanySponsorControllerApiFp(this.configuration)
      .getCompanyHouseEntry(page, size, zone, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CompanySponsorControllerApi
   */
  public getCompanyHouseEntryById(id: number, options?: any) {
    return CompanySponsorControllerApiFp(this.configuration)
      .getCompanyHouseEntryById(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PdfSponsorControllerApi - axios parameter creator
 * @export
 */
export const PdfSponsorControllerApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {Pageable} pageable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPDFSponsor: async (
      pageable: Pageable,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'pageable' is not null or undefined
      if (pageable === null || pageable === undefined) {
        throw new RequiredError(
          "pageable",
          "Required parameter pageable was null or undefined when calling getPDFSponsor."
        );
      }
      const localVarPath = `/pdfsponsor`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (pageable !== undefined) {
        localVarQueryParameter["pageable"] = pageable;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PdfSponsorControllerApi - functional programming interface
 * @export
 */
export const PdfSponsorControllerApiFp = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {Pageable} pageable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPDFSponsor(
      pageable: Pageable,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagePDFSponsor>
    > {
      const localVarAxiosArgs = await PdfSponsorControllerApiAxiosParamCreator(
        configuration
      ).getPDFSponsor(pageable, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * PdfSponsorControllerApi - factory interface
 * @export
 */
export const PdfSponsorControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @param {Pageable} pageable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPDFSponsor(
      pageable: Pageable,
      options?: any
    ): AxiosPromise<PagePDFSponsor> {
      return PdfSponsorControllerApiFp(configuration)
        .getPDFSponsor(pageable, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PdfSponsorControllerApi - object-oriented interface
 * @export
 * @class PdfSponsorControllerApi
 * @extends {BaseAPI}
 */
export class PdfSponsorControllerApi extends BaseAPI {
  /**
   *
   * @param {Pageable} pageable
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PdfSponsorControllerApi
   */
  public getPDFSponsor(pageable: Pageable, options?: any) {
    return PdfSponsorControllerApiFp(this.configuration)
      .getPDFSponsor(pageable, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
